package dadkvs.server;

/* these imported classes are generated by the contract */

import dadkvs.DadkvsMain;
import dadkvs.DadkvsMainServiceGrpc;
import io.grpc.stub.StreamObserver;


public class DadkvsMainServiceImpl extends DadkvsMainServiceGrpc.DadkvsMainServiceImplBase {

    DadkvsServerState server_state;


    public DadkvsMainServiceImpl(DadkvsServerState state) {
        this.server_state = state;
    }

    @Override
    public void read(DadkvsMain.ReadRequest request, StreamObserver<DadkvsMain.ReadReply> responseObserver) {
        // for debug purposes
        System.out.println("Receiving read request:" + request);
        switch (server_state.debug_mode) {
            case 1:
                System.out.println("Shutting down server");
                System.exit(0);
            case 2:
                System.out.println("Server is frozen, not processing commit request.");
                //TODO: Maybe just freeze()
                return;
            case 4:
                try {
                    long delay = (long) (Math.random() * 1000);  // Random delay up to 1 second
                    Thread.sleep(delay);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                break;
        }
        int reqid = request.getReqid();
        int key = request.getKey();
        VersionedValue vv = this.server_state.store.read(key);

        DadkvsMain.ReadReply response = DadkvsMain.ReadReply.newBuilder()
                .setReqid(reqid).setValue(vv.getValue()).setTimestamp(vv.getVersion()).build();

        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    @Override
    public void committx(DadkvsMain.CommitRequest request, StreamObserver<DadkvsMain.CommitReply> responseObserver) {
        // for debug purposes
        System.out.println("Receiving commit request:" + request);

        int reqid = request.getReqid();
        int key1 = request.getKey1();
        int version1 = request.getVersion1();
        int key2 = request.getKey2();
        int version2 = request.getVersion2();
        int writekey = request.getWritekey();
        int writeval = request.getWriteval();

        // for debug purposes
        System.out.println("reqid " + reqid + " key1 " + key1 + " v1 " + version1 + " k2 " + key2 + " v2 " + version2 + " wk " + writekey + " writeval " + writeval);

        // Using the index as timestamp for write versioning
        TransactionRecord txrecord = new TransactionRecord(key1, version1, key2, version2, writekey, writeval);
        server_state.addTransactionRecordToQueue(reqid, txrecord);
        server_state.waitForTransactionExecution(reqid).thenAccept((result) -> {
            System.out.println("Result is ready for request with reqid " + reqid);
            System.out.println("Log when responding: " + server_state.transaction_execution_log);
            DadkvsMain.CommitReply response = DadkvsMain.CommitReply.newBuilder()
                    .setReqid(reqid).setAck(result).build();

            responseObserver.onNext(response);
            responseObserver.onCompleted();
        });

    }
}
